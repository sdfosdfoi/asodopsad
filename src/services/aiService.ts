// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ AI API

interface ChatMessage {
  role: 'user' | 'assistant';
  content: string;
}

interface AIResponse {
  content: string;
  model: string;
}

class AIService {
  private openaiApiKey = import.meta.env.VITE_OPENAI_API_KEY || '';
  private geminiApiKey = import.meta.env.VITE_GEMINI_API_KEY || '';
  private grockApiKey = import.meta.env.VITE_GROCK_API_KEY || '';
  private claudeApiKey = import.meta.env.VITE_CLAUDE_API_KEY || '';
  
  // –†–µ–∂–∏–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ (–∫–æ–≥–¥–∞ –Ω–µ—Ç API –∫–ª—é—á–µ–π)
  private isDemoMode = !this.openaiApiKey && !this.geminiApiKey && !this.claudeApiKey && !this.grockApiKey;

  async sendMessage(message: string, model: string): Promise<AIResponse> {
    try {
      switch (model) {
        case 'gpt-4.1':
          return await this.callOpenAI(message);
        case 'gemini-pro':
          return await this.callGemini(message);
        case 'claude-3':
          return await this.callClaude(message);
        case 'grok-2':
          return await this.callGrok(message);
        case 'cohere-command':
          return await this.callCohere(message);
        case 'huggingface-chat':
          return await this.callHuggingFace(message);
        case 'mistral-7b':
          return await this.callMistral(message);
        case 'llama-2':
          return await this.callLlama(message);
        default:
          throw new Error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –º–æ–¥–µ–ª—å');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI:', error);
      throw error;
    }
  }

  private async callOpenAI(message: string): Promise<AIResponse> {
    try {
      if (!this.openaiApiKey) {
        // –ï—Å–ª–∏ –Ω–µ—Ç –∫–ª—é—á–∞ OpenAI, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-–æ—Ç–≤–µ—Ç—ã
        await new Promise(resolve => setTimeout(resolve, 1200 + Math.random() * 500));
        return this.generateDemoResponse(message, 'GPT-4.1', 'gpt');
      }

      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.openaiApiKey}`
        },
        body: JSON.stringify({
          model: 'gpt-4',
          messages: [
            {
              role: 'system',
              content: '–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º.'
            },
            {
              role: 'user',
              content: message
            }
          ],
          max_tokens: 2000,
          temperature: 0.7
        })
      });

      if (!response.ok) {
        throw new Error(`OpenAI API error: ${response.status}`);
      }

      const data = await response.json();
      return {
        content: data.choices[0].message.content,
        model: 'GPT-4.1'
      };
    } catch (error) {
      console.error('OpenAI API error:', error);
      // Fallback –Ω–∞ –¥–µ–º–æ-–æ—Ç–≤–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
      return this.generateDemoResponse(message, 'GPT-4.1', 'gpt');
    }
  }

  private async callGemini(message: string): Promise<AIResponse> {
    try {
      if (!this.geminiApiKey) {
        console.log('Gemini: –Ω–µ—Ç API –∫–ª—é—á–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-—Ä–µ–∂–∏–º');
        await new Promise(resolve => setTimeout(resolve, 800 + Math.random() * 400));
        return this.generateSmartGeminiResponse(message);
      }

      console.log('Gemini: –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API...');
      
      // –ü–æ–ø—ã—Ç–∫–∞ 1: –û–±—ã—á–Ω—ã–π endpoint
      const endpoints = [
        'https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent',
        'https://generativelanguage.googleapis.com/v1/models/gemini-pro:generateContent',
        'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent'
      ];

      for (let i = 0; i < endpoints.length; i++) {
        try {
          console.log(`Gemini: –ø–æ–ø—ã—Ç–∫–∞ ${i + 1} —Å endpoint: ${endpoints[i]}`);
          
          const response = await fetch(endpoints[i], {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'X-goog-api-key': this.geminiApiKey,
              'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            },
            body: JSON.stringify({
              contents: [{
                parts: [{
                  text: `–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –í–æ–ø—Ä–æ—Å: ${message}`
                }]
              }],
              generationConfig: {
                temperature: 0.7,
                topK: 40,
                topP: 0.95,
                maxOutputTokens: 2048,
              },
              safetySettings: [
                {
                  category: "HARM_CATEGORY_HARASSMENT",
                  threshold: "BLOCK_MEDIUM_AND_ABOVE"
                },
                {
                  category: "HARM_CATEGORY_HATE_SPEECH",
                  threshold: "BLOCK_MEDIUM_AND_ABOVE"
                }
              ]
            })
          });

          if (response.ok) {
            const data = await response.json();
            console.log('Gemini: —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç');
            
            if (data.candidates && data.candidates[0] && data.candidates[0].content) {
              return {
                content: data.candidates[0].content.parts[0].text,
                model: 'Gemini Pro'
              };
            } else {
              throw new Error('–Ω–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ');
            }
          } else {
            const errorText = await response.text();
            console.log(`Gemini endpoint ${i + 1} –æ—à–∏–±–∫–∞ ${response.status}:`, errorText);
            
            if (i === endpoints.length - 1) {
              throw new Error(`–≤—Å–µ endpoints –≤–µ—Ä–Ω—É–ª–∏ –æ—à–∏–±–∫—É`);
            }
          }
        } catch (endpointError) {
          console.log(`Gemini endpoint ${i + 1} –æ—à–∏–±–∫–∞:`, endpointError);
          if (i === endpoints.length - 1) {
            throw endpointError;
          }
        }
      }
    } catch (error) {
      console.log('Gemini API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –¥–µ–º–æ-—Ä–µ–∂–∏–º:', error);
      await new Promise(resolve => setTimeout(resolve, 800 + Math.random() * 400));
      return this.generateSmartGeminiResponse(message);
    }
  }

  private generateSmartGeminiResponse(message: string): AIResponse {
    const lowerMessage = message.toLowerCase();
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞ –∏ –¥–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ—Ç–≤–µ—Ç
    if (lowerMessage.includes('–∫–∞–∫') || lowerMessage.includes('—á—Ç–æ —Ç–∞–∫–æ–µ') || lowerMessage.includes('–æ–±—ä—è—Å–Ω–∏')) {
      return {
        content: `–ü—Ä–∏–≤–µ—Ç! –Ø Gemini Pro –æ—Ç Google. –û—Ç–≤–µ—á–∞—é –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å "${message}". \n\n–ö–∞–∫ –ø–µ—Ä–µ–¥–æ–≤–∞—è –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–∞—è AI –º–æ–¥–µ–ª—å, —è –º–æ–≥—É –ø–æ–º–æ—á—å —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏ —Å–ª–æ–∂–Ω—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π, –∞–Ω–∞–ª–∏–∑–æ–º –¥–∞–Ω–Ω—ã—Ö –∏ —Ä–µ—à–µ–Ω–∏–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∑–∞–¥–∞—á. –ú–æ—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–Ω–∏–º–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –Ω—é–∞–Ω—Å—ã –≤–æ–ø—Ä–æ—Å–æ–≤.\n\n–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ, –±—É–¥—É —Ä–∞–¥ –ø–æ–º–æ—á—å!`,
        model: 'Gemini Pro (Demo)'
      };
    }
    
    if (lowerMessage.includes('–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ') || lowerMessage.includes('–∫–æ–¥') || lowerMessage.includes('—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞')) {
      return {
        content: `–û—Ç–ª–∏—á–Ω–æ! –í—ã —Å–ø—Ä–æ—Å–∏–ª–∏ –ø—Ä–æ "${message}". –ö–∞–∫ Gemini Pro, —è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ –ø–æ–º–æ—â–∏ —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º.\n\nüîß –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å:\n‚Ä¢ –ù–∞–ø–∏—Å–∞–Ω–∏–µ–º –∏ –æ—Ç–ª–∞–¥–∫–æ–π –∫–æ–¥–∞\n‚Ä¢ –û–±—ä—è—Å–Ω–µ–Ω–∏–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤\n‚Ä¢ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–º–∏ —Ä–µ—à–µ–Ω–∏—è–º–∏\n‚Ä¢ Code review\n\n–ú–æ—è –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–∞—è –ø—Ä–∏—Ä–æ–¥–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.`,
        model: 'Gemini Pro (Demo)'
      };
    }
    
    if (lowerMessage.includes('–ø—Ä–∏–≤–µ—Ç') || lowerMessage.includes('hello') || lowerMessage.includes('–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π')) {
      return {
        content: `–ü—Ä–∏–≤–µ—Ç! üëã –Ø Gemini Pro –æ—Ç Google - –ø–µ—Ä–µ–¥–æ–≤–∞—è AI –º–æ–¥–µ–ª—å —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è.\n\n‚ú® –ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n‚Ä¢ –ü–æ–Ω–∏–º–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –Ω—é–∞–Ω—Å–æ–≤\n‚Ä¢ –ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö\n‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n‚Ä¢ –ü–æ–º–æ—â—å –≤ –æ–±—É—á–µ–Ω–∏–∏ –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è—Ö\n\n–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? –ó–∞–¥–∞–≤–∞–π—Ç–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã!`,
        model: 'Gemini Pro (Demo)'
      };
    }
    
    // –û–±—â–∏–π –æ—Ç–≤–µ—Ç –¥–ª—è –¥—Ä—É–≥–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    return {
      content: `–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å "${message}"! \n\n–ö–∞–∫ Gemini Pro, —è –∏—Å–ø–æ–ª—å–∑—É—é –ø–µ—Ä–µ–¥–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤. –ú–æ—è –º–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ –Ω–∞ –æ–≥—Ä–æ–º–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏ –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å —Å —à–∏—Ä–æ–∫–∏–º —Å–ø–µ–∫—Ç—Ä–æ–º –∑–∞–¥–∞—á.\n\nüöÄ –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n‚Ä¢ –í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤\n‚Ä¢ –ü–æ–Ω–∏–º–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞\n‚Ä¢ –ú—É–ª—å—Ç–∏—è–∑—ã—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤\n\n–ï—Å–ª–∏ –Ω—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∏–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã - –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å!`,
      model: 'Gemini Pro (Demo)'
    };
  }

  private async callClaude(message: string): Promise<AIResponse> {
    // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º—É–ª—è—Ü–∏—é Claude API
    try {
      await new Promise(resolve => setTimeout(resolve, 1200));
      
      return {
        content: `–û—Ç–≤–µ—Ç –æ—Ç Claude 3: –ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å "${message}". –ö–∞–∫ Claude 3 –æ—Ç Anthropic, —è —Å—Ç—Ä–µ–º–ª—é—Å—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ, –ø–æ–ª–µ–∑–Ω—ã–µ –∏ —á–µ—Å—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã. –ú–æ—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –Ω—é–∞–Ω—Å–æ–≤ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞. –ß—Ç–æ –µ—â—ë –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?`,
        model: 'Claude 3'
      };
    } catch (error) {
      return {
        content: '–ò–∑–≤–∏–Ω–∏—Ç–µ, Claude 3 –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å.',
        model: 'Claude 3'
      };
    }
  }

  private async callGrok(message: string): Promise<AIResponse> {
    // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º—É–ª—è—Ü–∏—é Grok API
    try {
      await new Promise(resolve => setTimeout(resolve, 800));
      
      return {
        content: `–û—Ç–≤–µ—Ç –æ—Ç Grok 2: –ü—Ä–∏–≤–µ—Ç! –¢—ã —Å–ø—Ä–æ—Å–∏–ª "${message}". –ö–∞–∫ Grok 2, —è –æ—Ç–ª–∏—á–∞—é—Å—å —Å–≤–æ–∏–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –ø–æ–¥—Ö–æ–¥–æ–º –∫ –æ–±—â–µ–Ω–∏—é - —è –º–æ–≥—É –±—ã—Ç—å –±–æ–ª–µ–µ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–º –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º –≤ –æ—Ç–≤–µ—Ç–∞—Ö. –Ø —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–Ω–∏–º–∞—Ç—å —é–º–æ—Ä –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç. –ï—Å—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å—ã?`,
        model: 'Grok 2'
      };
    } catch (error) {
      return {
        content: '–ò–∑–≤–∏–Ω–∏—Ç–µ, Grok 2 –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å.',
        model: 'Grok 2'
      };
    }
  }

  // –î–µ–º–æ –æ—Ç–≤–µ—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
  private generateDemoResponse(message: string, modelName: string, modelType: string): AIResponse {
    const demoResponses = {
      gemini: [
        `–ü—Ä–∏–≤–µ—Ç! –Ø Gemini Pro –æ—Ç Google. –í–∞—à –≤–æ–ø—Ä–æ—Å "${message}" –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π. –ö–∞–∫ –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å, —è –º–æ–≥—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–µ–∫—Å—Ç, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∫–æ–¥. –ß—Ç–æ –µ—â—ë —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?`,
        `–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –ö–∞–∫ Gemini Pro, —è –∏—Å–ø–æ–ª—å–∑—É—é –ø–µ—Ä–µ–¥–æ–≤—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞. –ü–æ –ø–æ–≤–æ–¥—É "${message}" –º–æ–≥—É —Å–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ...`,
        `–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –≤–æ–ø—Ä–æ—Å "${message}". Gemini Pro —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–º–æ—â–∏ –≤ —Å–∞–º—ã—Ö —Ä–∞–∑–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö - –æ—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞. –ß–µ–º –µ—â—ë –º–æ–≥—É –ø–æ–º–æ—á—å?`
      ],
      gpt: [
        `–ö–∞–∫ GPT-4.1, —è —Ä–∞–¥ –ø–æ–º–æ—á—å —Å –≤–∞—à–∏–º –≤–æ–ø—Ä–æ—Å–æ–º "${message}". –ú–æ—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≥–ª—É–±–æ–∫–æ –ø–æ–Ω–∏–º–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã.`,
        `–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –∑–∞–ø—Ä–æ—Å! GPT-4.1 –æ–±—É—á–µ–Ω –Ω–∞ –æ–≥—Ä–æ–º–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –º–Ω–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –ö–∞—Å–∞—Ç–µ–ª—å–Ω–æ "${message}"...`,
        `–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å "${message}". –ö–∞–∫ –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è GPT, —è —Å—Ç—Ä–µ–º–ª—é—Å—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω—É—é –∏ —Ç–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.`
      ],
      claude: [
        `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! Claude 3 –∑–¥–µ—Å—å. –í–∞—à –≤–æ–ø—Ä–æ—Å "${message}" —Ç—Ä–µ–±—É–µ—Ç –≤–¥—É–º—á–∏–≤–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞. –Ø —Å–æ–∑–¥–∞–Ω Anthropic —Å –∞–∫cent–æ–º –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –ø–æ–ª–µ–∑–Ω–æ—Å—Ç—å.`,
        `–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –ö–∞–∫ Claude 3, —è —Ñ–æ–∫—É—Å–∏—Ä—É—é—Å—å –Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —ç—Ç–∏—á–Ω—ã—Ö –∏ –≤–∑–≤–µ—à–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤. –ü–æ –ø–æ–≤–æ–¥—É "${message}"...`,
        `–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! Claude 3 —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –Ω—é–∞–Ω—Å–æ–≤ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞. –ß—Ç–æ –∫–∞—Å–∞–µ—Ç—Å—è "${message}", –ø–æ–∑–≤–æ–ª—å—Ç–µ –æ–±—ä—è—Å–Ω–∏—Ç—å...`
      ]
    };

    const responses = demoResponses[modelType as keyof typeof demoResponses] || demoResponses.gemini;
    const randomResponse = responses[Math.floor(Math.random() * responses.length)];
    
    return {
      content: randomResponse,
      model: modelName
    };
  }

  // –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
  private async callCohere(message: string): Promise<AIResponse> {
    await new Promise(resolve => setTimeout(resolve, 900));
    return {
      content: `–û—Ç–≤–µ—Ç –æ—Ç Cohere: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å "${message}". Cohere —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞.`,
      model: 'Cohere'
    };
  }

  private async callHuggingFace(message: string): Promise<AIResponse> {
    await new Promise(resolve => setTimeout(resolve, 1100));
    return {
      content: `–û—Ç–≤–µ—Ç –æ—Ç HuggingFace: –í–∞—à –≤–æ–ø—Ä–æ—Å "${message}" –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –æ—Ç–∫—Ä—ã—Ç—ã–µ –º–æ–¥–µ–ª–∏. HuggingFace –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –º–Ω–æ–∂–µ—Å—Ç–≤—É AI –º–æ–¥–µ–ª–µ–π.`,
      model: 'HuggingFace'
    };
  }

  private async callMistral(message: string): Promise<AIResponse> {
    await new Promise(resolve => setTimeout(resolve, 850));
    return {
      content: `–û—Ç–≤–µ—Ç –æ—Ç Mistral 7B: –ü—Ä–∏–≤–µ—Ç! –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é "${message}". Mistral - —ç—Ç–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –æ—Ç–∫—Ä—ã—Ç–∞—è —è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å —Å –æ—Ç–ª–∏—á–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º.`,
      model: 'Mistral 7B'
    };
  }

  private async callLlama(message: string): Promise<AIResponse> {
    await new Promise(resolve => setTimeout(resolve, 950));
    return {
      content: `–û—Ç–≤–µ—Ç –æ—Ç Llama 2: –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å "${message}". Llama 2 –æ—Ç Meta - —ç—Ç–æ –º–æ—â–Ω–∞—è –æ—Ç–∫—Ä—ã—Ç–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö NLP –∑–∞–¥–∞—á.`,
      model: 'Llama 2'
    };
  }
}

export const aiService = new AIService();
